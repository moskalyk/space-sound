{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Error","className","Success","Space","App","React","useState","pop","setPop","fontSize","number","setNumber","complete","setComplete","error","setError","style","top","color","href","placeholder","onChange","e","target","value","onClick","substr","fetch","method","headers","body","JSON","stringify","phoneNumber","then","res","a","catch","handleJoin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,mJCgD3C,SAASC,IACP,OAAQ,yBAAKC,UAAU,iBAAf,yBAGV,SAASC,IACP,OAAQ,yBAAKD,UAAU,WAAf,uBAGV,SAASE,IACP,OACE,oCACA,6BACM,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,6BACA,8BAiFKC,MA1Ef,WAAgB,IAAD,EACSC,IAAMC,SAAS,iBADxB,mBACNC,EADM,KACDC,EADC,OAEmBH,IAAMC,SAAS,KAFlC,mBAENG,EAFM,aAGeJ,IAAMC,SAAS,KAH9B,mBAGNI,EAHM,KAGEC,EAHF,OAImBN,IAAMC,UAAS,GAJlC,mBAINM,EAJM,KAIIC,EAJJ,OAKaR,IAAMC,UAAS,GAL5B,mBAKNQ,EALM,KAKCC,EALD,KAsCb,OACE,yBAAKd,UAAU,OACb,4BAAQA,UAAU,cAEd,0BAAMA,UAAW,MAAOe,MAAO,CAACP,SAAUA,EAAUQ,IAAK,SAAUV,GACnE,0BAAMN,UAAW,MAAOe,MAAO,CAACP,SAAUA,EAAUQ,IAAK,SAAUV,GACnE,0BAAMN,UAAW,MAAOe,MAAO,CAACP,SAAUA,EAAUQ,IAAK,SAAUV,GACnE,kBAACJ,EAAD,MACA,uBAAGa,MAAO,CAACE,MAAO,QAAST,SAAU,SAArC,0CACA,uBAAGR,UAAU,cAAckB,KAAK,oBAAhC,yBACA,uBAAGH,MAAO,CAACE,MAAO,QAAST,SAAU,SAArC,sBAAiE,kCAAjE,iCAGEG,EAAW,kBAACV,EAAD,MAAc,KAIzBY,EAAQ,kBAACd,EAAD,MAAY,KAGlBY,GAAYE,EASZ,KARF,oCACE,2BAAOM,YAAY,cAAcC,SAAU,SAACC,GAC1CX,EAAUW,EAAEC,OAAOC,UAErB,6BACA,4BAAQvB,UAAU,SAASwB,QAAS,kBArDhD,SAAoBf,GAES,GAAvBA,EAAOgB,OAAO,EAAG,KACnBhB,EAAS,IAAMA,GASjBiB,MAAM,QACJ,CACEC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAACC,YAAavB,MAEtCwB,KARD,uCAQM,WAAOC,GAAP,SAAAC,EAAA,sDACJvB,GAAY,GADR,2CARN,uDAUGwB,OAAM,SAACf,GACRP,GAAS,MA8ByCuB,CAAW5B,KAArD,QACA,uBAAGT,UAAU,cAAb,iFAAwG,uBAAGe,MAAO,CAACE,MAAO,QAASC,KAAK,IAAIM,QAAS,kBAAMjB,EAAO,wBAA1D,aCjIlG+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,kB","file":"static/js/main.f7fd5be6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport useForceUpdate from 'use-force-update';\nimport { parsePhoneNumberFromString } from 'libphonenumber-js'\n\n// Ways to change\n\n/*\n\nfunction to cycle through:\nadding classes and removing classes\n\nmultiple\ncolor change\nrelocation\n\nre-styling\n\ninput at bottom\n\ndraw lines\nmove lines\n\ninvert whole\n\nstripes\nbackground: repeating-linear-gradient(\n  45deg,\n  #606dbc,\n  #606dbc 10px,\n  #465298 10px,\n  #465298 20px\n);\n\n*/\n// \nfunction generator(){\n  return\n}\n\nfunction generated(){\n\n  const els = []\n  return \n}\n\nfunction Error () {\n  return (<div className=\"error-message\">Something went wrong.</div>)\n}\n\nfunction Success () {\n  return (<div className=\"message\">Success. Call soon.</div>)\n}\n\nfunction Space () {\n  return (\n    <>\n    <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n          <br />\n\n    </>\n    )\n}\n\n// @observer\nfunction App() {\n  const [pop, setPop] = React.useState(\"place & sound\")\n  const [fontSize, setFontSize] = React.useState(100)\n  const [number, setNumber] = React.useState('')\n  const [complete, setComplete] = React.useState(false)\n  const [error, setError] = React.useState(false)\n  \n  function handleWhy(){\n    \n  }\n\n  function handleJoin(number){\n    // post to server\n    if (number.substr(0, 1) != 1){\n      number = \"1\" + number\n    }\n    // str.substr(1, 4)\n\n    // const phoneNumber = parsePhoneNumberFromString(number)\n    // console.log(phoneNumber)\n  // if (phoneNumber) {\n\n    // fetch('http://localhost:8080/join', \n    fetch('/join', \n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({phoneNumber: number})\n    })\n    .then(async (res) => {\n      setComplete(true)\n    }).catch((e) => {\n      setError(true)\n    })\n  }\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          {/*<span style={{ }}>{pop}</span>*/}\n          <span className={\"pop\"} style={{fontSize: fontSize, top: '15vh'}}>{pop}</span>\n          <span className={\"pop\"} style={{fontSize: fontSize, top: '30vh'}}>{pop}</span>\n          <span className={\"pop\"} style={{fontSize: fontSize, top: '45vh'}}>{pop}</span>\n          <Space />\n          <p style={{color: 'black', fontSize: \"20px\"}}>automated call service for dance spots</p>\n          <a className=\"phoneNumber\" href=\"tel:647-556-5651\">call >> +16475565651*</a>\n          <p style={{color: 'black', fontSize: \"20px\"}}>or, we'll call you <b>8pm</b> night of, Friday & Saturday.</p>\n\n          {\n            complete ? <Success /> : null\n          }\n\n          {\n            error ? <Error /> : null\n          }\n          {\n            !(complete || error ) ? \n            <>\n              <input placeholder=\"your number\" onChange={(e) => {\n                setNumber(e.target.value)\n              }}/>\n              <br/>\n              <button className=\"button\" onClick={() => handleJoin(number)}>join</button>\n              <p className=\"disclaimer\">*toronto edition, top picks from Resident Advisor with some DIY mix ins. but, <a style={{color: 'blue'}} href=\"#\" onClick={() => setPop(\"retro. no socials.\")}>why?</a></p>\n            </>\n            : null\n          }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}